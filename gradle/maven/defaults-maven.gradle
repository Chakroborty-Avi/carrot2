configure(rootProject) {
  configurations {
    mavenArtifacts
  }

  ext {
    mavenBuildRepo = file("${buildDir}/maven")

    published = [
      ":core",
      ":dcs:model",
      ":lang:lucene",
      ":lang:lucene-chinese",
      ":lang:lucene-japanese",
      ":lang:lucene-korean",
      ":lang:polish",
    ]
  }

  task mavenLocalClean(type: Delete) {
    delete mavenBuildRepo
  }

  task publishLocal() {
    group = "Publishing"
    description = "Publish Maven artifacts locally to " + file(mavenBuildRepo)
  }

  task isGitClean() {
    doFirst {
      if (!rootProject.gitStatus.clean) {
        throw new GradleException("Seems like your git checkout isn't clean? Can't publish from this state.")
      }
    }
  }

  task publishSonatype() {
    dependsOn isGitClean
    group = "Publishing"
    description = "Publish Maven artifacts to Sonatype OSS Nexus"
  }

  artifacts {
    mavenArtifacts mavenBuildRepo, {
      builtBy tasks.publishLocal
    }
  }

  task promoteToMavenCentral {
    group = 'publishing'
    description = 'Promotes staged artifacts to Maven Central'

    onlyIf {
      project.hasProperty('nexusUsername') &&
          project.hasProperty('nexusPassword') &&
          !project.version.endsWith('-SNAPSHOT')
    }

    doLast {
      def username = project.properties['nexusUsername']
      def password = project.properties['nexusPassword']

      // Create base64 encoded token for authentication
      def token = "${username}:${password}".bytes.encodeBase64().toString()

      // Get open staging repositories
      def response = new URL("https://ossrh-staging-api.central.sonatype.com/manual/search/repositories").openConnection()
      response.setRequestProperty("Authorization", "Basic ${token}")
      response.setRequestProperty("Content-Type", "application/json")

      def repositories = new groovy.json.JsonSlurper().parse(response.inputStream)

      // Promote each open repository
      repositories.repositories.each { repo ->
        println("Repo: ${repo.key} -> ${repo.state}")

        if (repo.state == "open") {
          project.logger.lifecycle("Promoting repository ${repo.key}")

          def promoteUrl = new URL("https://ossrh-staging-api.central.sonatype.com/manual/upload/repository/${repo.key}?publishing_type=automatic")
          def connection = promoteUrl.openConnection()
          connection.setRequestMethod("POST")
          connection.setRequestProperty("Authorization", "Basic ${token}")
          connection.setRequestProperty("Content-Type", "application/json")

          def responseCode = connection.responseCode
          if (responseCode == 200) {
            project.logger.lifecycle("Successfully promoted repository ${repo.key}")
          } else {
            def errorStream = connection.errorStream
            def errorBody = errorStream ? errorStream.text : "No error body available"
            def errorMessage = "Failed to promote repository ${repo.key}. Response code: ${responseCode}. Response message: ${connection.responseMessage}. Error body: ${errorBody}"
            project.logger.error(errorMessage)
            throw new GradleException(errorMessage)
          }
        }
      }
    }
  }
}

configure(subprojects.findAll { it.path in published }) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  plugins.withType(JavaPlugin) {
    // Do not generate gradle metadata files.
    tasks.withType(GenerateModuleMetadata) {
      enabled = false
    }

    java {
      withSourcesJar()
      withJavadocJar()
    }

    publishing {
      repositories {
        maven {
          name = 'build'
          url = rootProject.mavenBuildRepo
        }
        maven {
          name = 'sonatype'
          url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2"
          credentials {
            if (project.hasProperty('nexusUsername')) {
              username = project.nexusUsername
            }
            if (project.hasProperty('nexusPassword')) {
              password = project.nexusPassword
            }
          }
        }
      }

      def configurePom = {
        name = "Carrot2 (${project.name})"
        description = "Carrot2 Text Clustering Library"
        url = 'https://project.carrot2.org'
        inceptionYear = "2001"
        licenses {
          license {
            name = 'BSD License'
            url = 'https://www.carrot2.org/carrot2.LICENSE'
          }
        }
        organization {
          name = "Carrot Search s.c."
          url = "https://www.carrotsearch.com"
        }
        developers {
          developer {
            id = 'stanislaw.osinski'
            name = 'Stanisław Osiński'
            email = 'stanislaw.osinski@carrotsearch.com'
          }
          developer {
            id = 'dawid.weiss'
            name = 'Dawid Weiss'
            email = 'dawid.weiss@carrotsearch.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:carrot2/carrot2.git'
          developerConnection = 'scm:git:git@github.com:carrot2/carrot2.git'
          url = 'https://github.com/carrot2/carrot2'
        }
      }

      publications {
        jars(MavenPublication) {
          from components.java
          group = project.group
          artifactId = project.base.archivesName.get()

          suppressPomMetadataWarningsFor('sourcesElements')

          pom(configurePom)
        }

        maven(MavenPublication) {
          from components.java
          group = project.group
          artifactId = project.base.archivesName.get()

          suppressPomMetadataWarningsFor('sourcesElements')

          pom(configurePom)
        }
      }
    }

    publishJarsPublicationToBuildRepository.dependsOn mavenLocalClean
    publishLocal.dependsOn publishJarsPublicationToBuildRepository

    publishSonatype.dependsOn publishMavenPublicationToSonatypeRepository

    signing {
      sign publishing.publications.maven
      if (project.hasProperty("signing.keyId")) {
        sign publishing.publications.jars
      }
    }
  }
}
